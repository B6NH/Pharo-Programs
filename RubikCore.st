Object subclass: #RubikCube	instanceVariableNames: 'top front bottom left right back'	classVariableNames: ''	poolDictionaries: ''	category: 'RubikCore'!!RubikCube commentStamp: 'ab 1/30/2019 21:22' prior: 0!I represent Rubik Cube!!RubikCube methodsFor: 'initialization' stamp: 'ab 1/30/2019 14:40'!setBackNes	back topNe: top; botNe: bottom;		   leftNe: right; rightNe: left;		 	backNe: front.! !!RubikCube methodsFor: 'initialization' stamp: 'ab 2/18/2019 21:34'!initialize	top := RubikFace new color: 'red'. left := RubikFace new color: 'white'.	right := RubikFace new color: 'green'. front := RubikFace new color: 'yellow'.	back := RubikFace new color: 'orange'. bottom := RubikFace new color: 'blue'.		self setTopNes setFrontNes setBackNes setLeftNes setRightNes setBotNes	! !!RubikCube methodsFor: 'initialization' stamp: 'ab 1/30/2019 14:39'!setBotNes	bottom topNe: front; botNe: back;		   leftNe: left; rightNe: right;		 	backNe: top.! !!RubikCube methodsFor: 'initialization' stamp: 'ab 1/30/2019 14:38'!setLeftNes	left topNe: top; botNe: bottom;		   leftNe: back; rightNe: front;		 	backNe: right.! !!RubikCube methodsFor: 'initialization' stamp: 'ab 1/30/2019 14:33'!setFrontNes	front topNe: top; botNe: bottom;		   leftNe: left; rightNe: right;		 	backNe: back.! !!RubikCube methodsFor: 'initialization' stamp: 'ab 1/30/2019 14:37'!setTopNes	top topNe: back; botNe: front;		   leftNe: left; rightNe: right;		 	backNe: bottom.! !!RubikCube methodsFor: 'initialization' stamp: 'ab 1/30/2019 14:36'!setRightNes	right topNe: top; botNe: bottom;		   leftNe: front; rightNe: back;		 	backNe: left.! !!RubikCube methodsFor: 'accessing' stamp: 'ab 1/30/2019 20:06'!front	^ front! !Object subclass: #RubikFace	instanceVariableNames: 'rows topNe leftNe rightNe botNe backNe'	classVariableNames: ''	poolDictionaries: ''	category: 'RubikCore'!!RubikFace commentStamp: 'ab 1/30/2019 21:22' prior: 0!I represent Rubik Cube Face!!RubikFace methodsFor: 'accessing' stamp: 'ab 1/30/2019 14:25'!rightNe: aFace	rightNe := aFace! !!RubikFace methodsFor: 'accessing' stamp: 'ab 1/30/2019 20:09'!rows	^ rows! !!RubikFace methodsFor: 'accessing' stamp: 'ab 1/30/2019 14:25'!botNe: aFace	botNe := aFace! !!RubikFace methodsFor: 'accessing' stamp: 'ab 1/30/2019 14:25'!leftNe: aFace	leftNe := aFace! !!RubikFace methodsFor: 'accessing' stamp: 'ab 1/30/2019 14:26'!backNe: aFace	backNe := aFace! !!RubikFace methodsFor: 'accessing' stamp: 'ab 2/19/2019 01:14'!fieldAt: posX at: posY	^ (self rowAt: posX)at:posY! !!RubikFace methodsFor: 'accessing' stamp: 'ab 2/19/2019 01:12'!rowAt: posX	^ rows at:posX! !!RubikFace methodsFor: 'accessing' stamp: 'ab 1/30/2019 14:25'!topNe: aFace	topNe := aFace! !!RubikFace methodsFor: 'public' stamp: 'ab 2/8/2019 15:43'!rotateMiddleDown	self notYetImplemented! !!RubikFace methodsFor: 'public' stamp: 'ab 2/8/2019 15:43'!rotateMiddleUp	self notYetImplemented! !!RubikFace methodsFor: 'public' stamp: 'ab 1/31/2019 00:46'!rotateRight	| s top |	s := 3. top := (topNe rows at:s) copy.	self rotateFaceRight moveLeftToTop moveBotToLeft moveRightToBot.	self moveTopRight: top! !!RubikFace methodsFor: 'public' stamp: 'ab 2/8/2019 15:43'!rotateMiddleLeft	self notYetImplemented! !!RubikFace methodsFor: 'public' stamp: 'ab 2/8/2019 15:43'!rotateMiddleRight	self notYetImplemented! !!RubikFace methodsFor: 'public' stamp: 'ab 2/8/2019 15:37'!rotateBotRight	botNe rotateRight! !!RubikFace methodsFor: 'public' stamp: 'ab 2/8/2019 15:41'!rotateRightUp	rightNe rotateRight! !!RubikFace methodsFor: 'public' stamp: 'ab 2/8/2019 15:41'!rotateRightDown	rightNe rotateLeft! !!RubikFace methodsFor: 'public' stamp: 'ab 2/8/2019 15:35'!rotateTopLeft	topNe rotateRight! !!RubikFace methodsFor: 'public' stamp: 'ab 2/8/2019 15:37'!rotateBotLeft	botNe rotateLeft! !!RubikFace methodsFor: 'public' stamp: 'ab 2/8/2019 15:40'!rotateLeftUp	leftNe rotateLeft! !!RubikFace methodsFor: 'public' stamp: 'ab 2/8/2019 15:39'!rotateLeftDown	leftNe rotateRight! !!RubikFace methodsFor: 'public' stamp: 'ab 2/8/2019 15:35'!rotateTopRight	topNe rotateLeft! !!RubikFace methodsFor: 'public' stamp: 'ab 1/31/2019 21:03'!rotateLeft	3 timesRepeat: [ self rotateRight ]! !!RubikFace methodsFor: 'manipulating' stamp: 'ab 1/30/2019 23:52'!moveLeftToTop	|count s|	s := 3. count := s.	1 to:s do:[:i|(topNe rows at:s) at:i put:((leftNe rows at:count) at:s). count := count - 1].! !!RubikFace methodsFor: 'manipulating' stamp: 'ab 1/31/2019 00:43'!moveTopRight: top	|s| s := 3.	1 to:s do:[:i|(rightNe rows at:i) at:1 put:(top at: i)].! !!RubikFace methodsFor: 'manipulating' stamp: 'ab 1/30/2019 23:36'!moveBotToLeft	|s|	s := 3.	1 to:s do:[:i|(leftNe rows at:i) at:s put:((botNe rows at:1) at:1)].! !!RubikFace methodsFor: 'manipulating' stamp: 'ab 1/31/2019 00:59'!moveRightToBot	|count s|	s := 3. count := s.	1 to:s do:[:i|(botNe rows at:1) at:i put:((rightNe rows at:1)at:count). count := count - 1].! !!RubikFace methodsFor: 'manipulating' stamp: 'ab 2/2/2019 22:15'!rotateFaceRight	|newrows s|	s := 3. newrows := Array new:s.	newrows := newrows collect: [ :i | Array new: s ].	1 to:s do:[:i|		|count| count := s.		1 to:s do:[:j|			(newrows at:i)at:j put:((rows at:count)at:i).			count := count - 1 ] ].	rows := newrows.! !!RubikFace methodsFor: 'initialization' stamp: 'ab 2/18/2019 21:16'!initialize	rows := Array new: 3.	rows := rows collect: [ :i | 		|temp|		temp := Array new:3.		temp := temp collect: [ :j| RubikField new ]		 ]! !!RubikFace methodsFor: 'initialization' stamp: 'ab 1/30/2019 16:27'!color: aColor	rows do: [ :row | row do:[:field| field color: aColor ]]! !Object subclass: #RubikField	instanceVariableNames: 'color'	classVariableNames: ''	poolDictionaries: ''	category: 'RubikCore'!!RubikField commentStamp: 'ab 1/30/2019 21:22' prior: 0!I represent Rubik Cube Field!!RubikField methodsFor: 'accessing' stamp: 'ab 2/18/2019 21:56'!color	^ color! !!RubikField methodsFor: 'accessing' stamp: 'ab 1/30/2019 14:44'!color: aColor	color := aColor! !TestCase subclass: #RubikTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'RubikCore'!!RubikTests methodsFor: 'tests' stamp: 'ab 2/19/2019 01:13'!testScenario	|cube face|	cube := RubikCube new. face := cube front. (face fieldAt:1 at:1) color: 'purple'.	self assert: ((face fieldAt:1 at:1)color) equals: 'purple'. face rotateRight.	self assert: ((face fieldAt:1 at:1)color) equals: 'yellow'.	self assert: ((face fieldAt:1 at:3)color) equals: 'purple'. face rotateLeft.	self assert: ((face fieldAt:1 at:1)color) equals: 'purple'.	self assert: ((face fieldAt:1 at:3)color) equals: 'yellow'.! !
