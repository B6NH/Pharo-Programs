TestCase subclass: #KANetworkEntitiesTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NetworkSimulator-Tests'!!KANetworkEntitiesTest commentStamp: 'ab 4/25/2019 00:36' prior: 0!Network Simulator Test Class!!KANetworkEntitiesTest methodsFor: 'tests' stamp: 'ab 4/25/2019 00:38'!testPacketCreation	| src dest payload packet |	src := Object new.	dest := Object new.	payload := Object new.		packet := KANetworkPacket from: src to: dest payload: payload.		self assert: packet sourceAddress equals: src.	self assert: packet destinationAddress equals: dest.	self assert: packet payload equals: payload! !!KANetworkEntitiesTest methodsFor: 'tests' stamp: 'ab 4/27/2019 00:00'!testNodeCreation	| address node |	address := Object new.	node := KANetworkNode withAddress: address.	self assert: node address equals: address! !!KANetworkEntitiesTest methodsFor: 'tests' stamp: 'ab 4/30/2019 03:01'!testLoopback	| node packet |	node := KANetworkNode withAddress: #address.	packet := KANetworkPacket from: #address to: #address payload: #payload.		node send: packet.	node loopback transmit: packet.		self assert: (node hasReceived: packet).	self deny: (node loopback isTransmitting: packet)! !!KANetworkEntitiesTest methodsFor: 'tests' stamp: 'ab 4/30/2019 03:05'!testSendAndTransmit	| srcNode destNode link packet |	srcNode := KANetworkNode withAddress: #src.	destNode := KANetworkNode withAddress: #dest.	link := (KANetworkLink from: srcNode to: destNode) attach; yourself.	packet := KANetworkPacket from: #src to: #dest payload: #payload.		srcNode send: packet via: link.	self assert: (link isTransmitting: packet).	self deny: (destNode hasReceived: packet).		link transmit: packet.	self deny: (link isTransmitting: packet).	self assert: (destNode hasReceived: packet)! !!KANetworkEntitiesTest methodsFor: 'tests' stamp: 'ab 5/5/2019 22:11'!testWorkstationReceivedCount	| srcNode workstation link packetOne packetTwo |	srcNode := KANetworkNode withAddress: #src.	workstation := KANetworkWorkstation withAddress: #dest.	link := (KANetworkLink from: srcNode to: workstation) attach; yourself.	packetOne := KANetworkPacket from: #src to: #dest payload: #payload.	packetTwo := KANetworkPacket from: #src to: #dest payload: #otherPayload.		srcNode send: packetOne via: link. link transmit: packetOne.	self assert: workstation receivedCount equals: 1.		srcNode send: packetTwo via: link. link transmit: packetTwo.	self assert: workstation receivedCount equals: 2.! !!KANetworkEntitiesTest methodsFor: 'tests' stamp: 'ab 5/5/2019 22:30'!testPrinterPrint	| srcNode printer link packet otherPacket |	srcNode := KANetworkNode withAddress: #src.	printer := KANetworkPrinter withAddress: #dest initialSupply: 1.	link := (KANetworkLink from: srcNode to: printer) attach; yourself.	packet := KANetworkPacket from: #src to: #dest payload: #payload.	otherPacket := KANetworkPacket from: #src to: #dest payload: #otherPayload.		self assert: printer supply equals: 1.	self assert: (printer tray isEmpty).		srcNode send: packet via: link. link transmit: packet.		self assert: printer supply equals: 0.	self assert: (printer tray includes: #payload).		srcNode send: otherPacket via: link. link transmit: otherPacket.		self assert: printer supply equals: 0.	self deny: (printer tray includes: #otherPayload).		printer resupply: 2.		srcNode send: otherPacket via: link. link transmit: otherPacket.		self assert: printer supply equals: 1.	self assert: (printer tray includes: #otherPayload)	! !!KANetworkEntitiesTest methodsFor: 'tests' stamp: 'ab 4/28/2019 22:32'!testNodeLinking	| node1 node2 link |	node1 := KANetworkNode withAddress: #address1.	node2 := KANetworkNode withAddress: #address2.	link := KANetworkLink from: node1 to: node2.	link attach.	self assert: (node1 hasLinkTo:  node2)! !!KANetworkEntitiesTest methodsFor: 'tests' stamp: 'ab 5/6/2019 23:41'!testServerResponse	| srcNode server link1 link2 packet responsePacket |	srcNode := KANetworkNode withAddress: #src.	server := KANetworkServer withAddress: #dest.	link1 := (KANetworkLink from: srcNode to: server) attach; yourself.	link2 := (KANetworkLink from: server to: srcNode) attach; yourself.	packet := KANetworkPacket from: #src to: #dest payload: #payload.		self assert: link2 packetsToTransmit isEmpty.	srcNode send: packet via: link1. link1 transmit: packet.	self assert: (server hasReceived: packet).	self deny: link2 packetsToTransmit isEmpty.	responsePacket := link2 packetsToTransmit detect: [ :aPacket | aPacket payload = 'PAYLOAD' ].	self assert: (link2 isTransmitting: responsePacket).	link2 transmit: responsePacket.	self assert: (srcNode hasReceived: responsePacket).	self assert: link2 packetsToTransmit isEmpty! !TestCase subclass: #KANetworkTest	instanceVariableNames: 'net hub alone'	classVariableNames: ''	poolDictionaries: ''	category: 'NetworkSimulator-Tests'!!KANetworkTest commentStamp: 'ab 4/30/2019 13:24' prior: 0!Network Test Class!!KANetworkTest methodsFor: 'tests' stamp: 'ab 5/4/2019 02:58'!testSendViaHub	| hello mac pc1 firstLink secondLink |	hello := KANetworkPacket from: #mac to: #pc1 payload: 'Hello!!'.	mac := net nodeAt: #mac.	pc1 := net nodeAt: #pc1.	firstLink := net linkFrom: #mac to: #hub.	secondLink := net linkFrom: #hub to: #pc1.		self assert: (hello isAddressedTo: pc1).	self assert: (hello isOriginatingFrom: mac).		mac send: hello.	self deny: (pc1 hasReceived: hello).	self assert: (firstLink isTransmitting: hello).		firstLink transmit: hello.	self deny: (pc1 hasReceived: hello).	self assert: (secondLink isTransmitting: hello).	secondLink transmit: hello.	self assert: (pc1 hasReceived: hello)! !!KANetworkTest methodsFor: 'tests' stamp: 'ab 4/30/2019 21:30'!testConnect	| netw hubb mac pc1 |	netw := KANetwork new.	hubb := KANetworkNode withAddress: #hub.	mac := KANetworkNode withAddress: #mac.	pc1 := KANetworkNode withAddress: #pc1.		netw connect: hubb to: mac.	self assert: (hubb hasLinkTo: mac).	self assert: (mac hasLinkTo: hubb).	self assert: (netw doesRecordNode: hubb).	self assert: (netw doesRecordNode: mac).		netw connect: hubb to: pc1.	self assert: (hubb hasLinkTo: pc1).	self assert: (mac hasLinkTo: hubb)! !!KANetworkTest methodsFor: 'tests' stamp: 'ab 5/3/2019 01:20'!testNetworkFindsLinks	| link |	self		shouldnt: [ link := net linkFrom: #pong to: #ping ]		raise: NotFound.	self		assert: link source		equals: (net nodeAt: #pong).	self		assert: link destination		equals: (net nodeAt: #ping)! !!KANetworkTest methodsFor: 'tests' stamp: 'ab 5/3/2019 01:24'!testSelfSend	| packet |	packet := KANetworkPacket		from: alone address		to: alone address		payload: #something.	self assert: (packet isAddressedTo: alone).	self assert: (packet isOriginatingFrom: alone).		alone send: packet.	self deny: (alone hasReceived: packet).	self assert: (alone loopback isTransmitting: packet).		alone loopback transmit: packet.	self deny: (alone loopback isTransmitting: packet).	self assert: (alone hasReceived: packet)! !!KANetworkTest methodsFor: 'tests' stamp: 'ab 4/30/2019 21:56'!testNetworkOnlyFindsAddedNodes	self		should: [ net nodeAt: alone address ]		raise: NotFound	! !!KANetworkTest methodsFor: 'tests' stamp: 'ab 4/30/2019 21:38'!testNetworkFindsNodesByAddress	self		assert: (net nodeAt: hub address ifNone: [ self fail ])		equals: hub	! !!KANetworkTest methodsFor: 'tests' stamp: 'ab 5/3/2019 01:31'!testDirectSend	| packet ping pong link |	packet := KANetworkPacket from: #ping to: #pong payload: #ball.	ping := net nodeAt: #ping.	pong := net nodeAt: #pong.	link := net linkFrom: #ping to: #pong.		ping send: packet.	self assert: (link isTransmitting: packet).	self deny: (pong hasReceived: packet).		link transmit: packet.	self deny: (link isTransmitting: packet).	self assert: (pong hasReceived: packet)! !!KANetworkTest methodsFor: 'as yet unclassified' stamp: 'ab 5/4/2019 02:54'!buildNetwork	alone := KANetworkNode withAddress: #alone.	net := KANetwork new.	hub := KANetworkHub withAddress: #hub.	#(mac pc1 pc2 prn)		do: [ :addr |			| node |			node := KANetworkNode withAddress: addr.			net connect: node to: hub			 ].	net connect: (KANetworkNode withAddress: #ping) to:	(KANetworkNode withAddress: #pong)! !!KANetworkTest methodsFor: 'initialization' stamp: 'ab 4/30/2019 13:24'!setUp	self buildNetwork! !
