Object subclass: #AabtractFormatter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SFactory'!!AabtractFormatter commentStamp: 'ab 1/25/2019 20:26' prior: 0!I am base class for formatters!!AabtractFormatter methodsFor: 'formatting' stamp: 'ab 1/25/2019 20:33'!format: aData	^ aData,'.',self fileExtension! !!AabtractFormatter methodsFor: 'accessing' stamp: 'ab 1/25/2019 20:38'!fileExtension	self subclassResponsibility! !AabtractFormatter subclass: #CsvFormatter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SFactory'!!CsvFormatter commentStamp: 'ab 1/25/2019 20:21' prior: 0!I format csv data!!CsvFormatter methodsFor: 'accessing' stamp: 'ab 1/25/2019 20:36'!fileExtension	^ 'csv'! !TestCase subclass: #FactoryTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SFactory'!!FactoryTests methodsFor: 'tests' stamp: 'ab 1/25/2019 20:30'!testReport	self assert:		(MyGenerator			generateWithData: 'hello world' 			andType: 'csv') equals: 'hello world.csv'.				self assert:		(MyGenerator			generateWithData: 'hello world' 			andType: 'json') equals: 'hello world.json'.! !!FactoryTests methodsFor: 'tests' stamp: 'ab 1/25/2019 20:19'!testWrongType	self should: 		[ MyGenerator			generateWithData: 'hello world' 			andType: 'cssv'.] raise: Error! !!FactoryTests methodsFor: 'tests' stamp: 'ab 1/25/2019 20:20'!testValidType	self shouldnt: 		[ MyGenerator			generateWithData: 'hello world' 			andType: 'csv'.] raise: Error! !Object subclass: #Formatter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SFactory'!!Formatter commentStamp: 'ab 1/25/2019 20:21' prior: 0!I create formatters for different data types!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Formatter class	instanceVariableNames: ''!!Formatter class methodsFor: 'instance creation' stamp: 'ab 1/25/2019 20:13'!for: aType	aType = 'csv' ifTrue:[ ^ CsvFormatter new ].	aType = 'json' ifTrue:[ ^ JsonFormatter new ].	self error: 'Unsupported type of report'! !AabtractFormatter subclass: #JsonFormatter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SFactory'!!JsonFormatter commentStamp: 'ab 1/25/2019 20:20' prior: 0!I format json data!!JsonFormatter methodsFor: 'accessing' stamp: 'ab 1/25/2019 20:37'!fileExtension	^ 'json'! !Object subclass: #MyGenerator	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SFactory'!!MyGenerator commentStamp: 'ab 1/25/2019 20:20' prior: 0!I generate reports!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyGenerator class	instanceVariableNames: ''!!MyGenerator class methodsFor: 'as yet unclassified' stamp: 'ab 1/25/2019 20:08'!generateWithData: aData andType: aType	^ (Formatter for: aType) format: aData.! !
