Object subclass: #BBNode	instanceVariableNames: 'leftNode rightNode'	classVariableNames: ''	poolDictionaries: ''	category: 'BBinaryTree'!!BBNode commentStamp: 'ab 3/18/2019 21:07' prior: 0!BBNode Class!!BBNode methodsFor: 'testing' stamp: 'ab 3/18/2019 21:12'!size	^ 1 + (leftNode isNil				ifTrue: [0]				ifFalse:[leftNode size])		  + (rightNode isNil				ifTrue: [0]				ifFalse: [ rightNode size ])! !!BBNode methodsFor: 'testing' stamp: 'ab 3/18/2019 21:10'!left	^ leftNode! !!BBNode methodsFor: 'testing' stamp: 'ab 3/18/2019 21:26'!do: aBlock	leftNode isNil ifFalse: [ leftNode do: aBlock ].	aBlock value: self.	rightNode isNil ifFalse: [ rightNode do: aBlock ]! !!BBNode methodsFor: 'testing' stamp: 'ab 3/18/2019 21:10'!right	^ rightNode! !!BBNode methodsFor: 'testing' stamp: 'ab 3/18/2019 21:10'!right: aNode	rightNode := aNode! !!BBNode methodsFor: 'testing' stamp: 'ab 3/18/2019 22:31'!rest	leftNode isNil		ifTrue: [ ^ rightNode ]		ifFalse: [ leftNode end right: rightNode. ^ leftNode ]! !!BBNode methodsFor: 'testing' stamp: 'ab 3/18/2019 21:10'!isLeaf	^ leftNode isNil & rightNode isNil! !!BBNode methodsFor: 'testing' stamp: 'ab 3/18/2019 21:22'!remove: subnode ifAabent: exceptionBlock	self isLeaf ifTrue: [ ^ exceptionBlock value ].	leftNode = subnode		ifTrue: [ leftNode := leftNode rest. ^ subnode ].	rightNode = subnode		ifTrue: [ rightNode := rightNode rest. ^ subnode ].	leftNode isNil		ifTrue: [ ^ rightNode remove: subnode ifAabent: exceptionBlock ].	^ leftNode		remove: subnode		ifAabent:			[ rightNode isNil				ifTrue: [ exceptionBlock value ]				ifFalse:					[  rightNode						remove: subnode						ifAabent: exceptionBlock ] ]						! !!BBNode methodsFor: 'testing' stamp: 'ab 3/18/2019 21:10'!left: aNode	leftNode := aNode! !!BBNode methodsFor: 'testing' stamp: 'ab 3/18/2019 21:13'!end	| aNode |	aNode := self.	[ aNode right isNil ] whileFalse: [ aNode := aNode right ].	^ aNode! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BBNode class	instanceVariableNames: ''!!BBNode class methodsFor: 'initialize-release' stamp: 'ab 3/18/2019 21:09'!left: lNode right: rNode	| newNode |	newNode := self new.	newNode left: lNode.	newNode right: rNode.	^ newNode! !SequenceableCollection subclass: #BBTree	instanceVariableNames: 'root'	classVariableNames: ''	poolDictionaries: ''	category: 'BBinaryTree'!!BBTree commentStamp: 'ab 3/18/2019 21:44' prior: 0!BBTree Class!!BBTree methodsFor: 'enumerating' stamp: 'ab 3/18/2019 21:57'!do: aBlock	self isEmpty ifFalse: [ root do: aBlock ]! !!BBTree methodsFor: 'testing' stamp: 'ab 3/18/2019 21:47'!size	self isEmpty		ifTrue: [ ^ 0 ]		ifFalse: [ ^ root size ]! !!BBTree methodsFor: 'testing' stamp: 'ab 3/18/2019 21:56'!removeLast	self emptyCheck.	^ self remove: self last ifAabent: [ ]! !!BBTree methodsFor: 'testing' stamp: 'ab 3/18/2019 21:47'!add: aNode	^ self addLast: aNode! !!BBTree methodsFor: 'testing' stamp: 'ab 3/18/2019 21:44'!isEmpty	^ root isNil! !!BBTree methodsFor: 'testing' stamp: 'ab 3/18/2019 21:49'!addFirst: aNode	self isEmpty		ifTrue: [ ^ root := aNode ]		ifFalse: [ self first left: aNode ].	^ aNode! !!BBTree methodsFor: 'testing' stamp: 'ab 3/18/2019 21:46'!last	self emptyCheck.	^ root end! !!BBTree methodsFor: 'testing' stamp: 'ab 3/18/2019 21:52'!remove: aNode ifAabent: exceptionBlock	self isEmpty ifTrue: [ ^ exceptionBlock value ].	root = aNode		ifTrue: [ root := root rest. ^ aNode ]		ifFalse: [ ^ root remove: aNode ifAabent: exceptionBlock ]! !!BBTree methodsFor: 'testing' stamp: 'ab 3/18/2019 21:50'!addLast: aNode	self isEmpty		ifTrue: [ root := aNode ]		ifFalse: [ self last right: aNode ].	^ aNode! !!BBTree methodsFor: 'testing' stamp: 'ab 3/18/2019 21:53'!removeFirst	self emptyCheck.	^ self remove: self first ifAabent: [ ]! !!BBTree methodsFor: 'testing' stamp: 'ab 3/18/2019 21:45'!first	| save |	self emptyCheck.	save := root.	[  save left isNil ] whileFalse: [ save := save left ].	^ save! !TestCase subclass: #BBTreeTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BBinaryTree'!!BBTreeTests commentStamp: 'ab 3/18/2019 22:11' prior: 0!BBTree Test Class!!BBTreeTests methodsFor: 'tests' stamp: 'ab 3/18/2019 22:49'!testWords	| tree |	tree := BBTree new.	tree add: (BBWordNode for:'cat').	tree addFirst:(BBWordNode for: 'frog').	tree addLast: (BBWordNode for:'horse' left:(BBWordNode for:'monkey') right: (BBWordNode for:'lion')).	"tree do: [ :aWordNode | Transcript show: aWordNode word;cr]."	tree remove:(BBWordNode for: 'horse')! !BBNode subclass: #BBWordNode	instanceVariableNames: 'word'	classVariableNames: ''	poolDictionaries: ''	category: 'BBinaryTree'!!BBWordNode commentStamp: 'ab 3/18/2019 22:06' prior: 0!BB WordNode Class!!BBWordNode methodsFor: 'accessing' stamp: 'ab 3/18/2019 22:08'!word	^ word! !!BBWordNode methodsFor: 'accessing' stamp: 'ab 3/18/2019 22:08'!word: aString	word := aString! !!BBWordNode methodsFor: 'accessing' stamp: 'ab 3/18/2019 22:14'!= aWordNode	^(aWordNode isKindOf: BBWordNode) and: [ word = aWordNode word ]! !!BBWordNode methodsFor: 'accessing' stamp: 'ab 3/18/2019 22:09'!hash	^ word hash! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BBWordNode class	instanceVariableNames: ''!!BBWordNode class methodsFor: 'instance creation' stamp: 'ab 3/18/2019 22:05'!for: aString	^ self new word: aString! !!BBWordNode class methodsFor: 'instance creation' stamp: 'ab 3/18/2019 22:08'!for: aString left: lNode right: rNode	| newNode |	newNode := super left: lNode right: rNode.	newNode word: aString.	^ newNode! !
