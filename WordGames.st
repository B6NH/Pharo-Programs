OrderedCollection subclass: #WordGamesBase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WordGames'!!WordGamesBase commentStamp: 'ab 1/4/2019 23:00' prior: 0!I am Base Class for Word Games!!WordGamesBase methodsFor: 'as yet unclassified' stamp: 'ab 1/4/2019 22:43'!rest	^ self copy removeFirst; yourself! !WordGamesBase subclass: #Word	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WordGames'!!Word commentStamp: 'ab 1/4/2019 21:43' prior: 0!I represent word as collection of characters!!Word methodsFor: 'as yet unclassified' stamp: 'ab 1/4/2019 22:54'!prefixWith: aLetter	^ self copy addFirst: aLetter;yourself! !!Word methodsFor: 'as yet unclassified' stamp: 'ab 1/4/2019 22:57'!arrangements	^ self isEmpty		ifTrue: [ Words new add: (self class) new;yourself]		ifFalse: [ 			((self rest) arrangements)				insertEverywhere: (self first)			 ]! !!Word methodsFor: 'as yet unclassified' stamp: 'ab 1/4/2019 22:56'!insertEverywhere: aLetter	^ self isEmpty		ifTrue:[			Words new add:(self class new add: aLetter;yourself);yourself			]		ifFalse:[			((self rest insertEverywhere: aLetter)				prefixAll: self first)					addFirst:(self prefixWith: aLetter); yourself					]! !TestCase subclass: #WordGamesTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WordGames'!!WordGamesTests commentStamp: 'ab 1/4/2019 21:46' prior: 0!Testing Word Games!!WordGamesTests methodsFor: 'tests' stamp: 'ab 1/4/2019 23:05'!testArrangementsForEmptyWord	|emptyWord expected inside|	emptyWord := Word new.	inside := Word new.	expected := Words new add: inside;yourself.	self assert: (emptyWord arrangements) equals: expected! !!WordGamesTests methodsFor: 'tests' stamp: 'ab 1/4/2019 21:48'!testPrefixWith	| aWord result|	aWord := Word new.	aWord add: $a;add: $r; add: $t.	result := aWord prefixWith: $q.	self assert: (result size) equals: 4.	self assert: (result at:1) equals: $q; assert: (result at:2) equals: $a.	self assert: (result at:3) equals: $r; assert: (result at:4) equals: $t.		"original is not modified"	self assert: (aWord size) equals: 3! !!WordGamesTests methodsFor: 'tests' stamp: 'ab 1/4/2019 22:09'!testArrangements	|word expected|	word := Word new add: $a; add: $b; add: $c;yourself.	expected := Words new.	expected add: (Words new add: $a;add:$b;add:$c;yourself).	expected add: (Words new add: $a;add:$c;add:$b;yourself).	expected add: (Words new add: $b;add:$a;add:$c;yourself).	expected add: (Words new add: $b;add:$c;add:$a;yourself).	expected add: (Words new add: $c;add:$a;add:$b;yourself).	expected add: (Words new add: $c;add:$b;add:$a;yourself).	self assert:(word arrangements)size equals:expected size! !!WordGamesTests methodsFor: 'tests' stamp: 'ab 1/4/2019 22:08'!testInsertEverywhere	| aWord result one two three four|	aWord := Word new add: $a;add: $b;add: $c;yourself.	result := aWord insertEverywhere: $j.	one := Word new add: $j; add: $a;add: $b;add: $c;yourself.	two := Word new add: $a; add: $j;add: $b;add: $c;yourself.	three := Word new add: $a; add: $b;add: $j;add: $c;yourself.	four := Word new add: $a; add: $b;add: $c;add: $j;yourself.	self assert:(result includes: one).	self assert:(result includes: two).	self assert:(result includes: three).	self assert:(result includes: four).! !!WordGamesTests methodsFor: 'tests' stamp: 'ab 1/4/2019 21:48'!testPrefixAll	| aWord1 aWord2 aWords expected|	aWord1 := Word new add: $a;add: $r; add: $t;yourself.	aWord2 := Word new add: $g;add: $u; add: $n;yourself.	aWords := Words new add:aWord1; add: aWord2;yourself.		expected := aWords prefixAll: $q.	self assert: (expected size) equals: 2.	self assert: ((expected at:1) size) equals: 4.	self assert: ((expected at:1) at:1) equals: $q; assert: ((expected at:1) at:2) equals: $a.	self assert: ((expected at:1) at:3) equals: $r; assert: ((expected at:1) at:4) equals: $t.	self assert: ((expected at:2) at:1) equals: $q; assert: ((expected at:2) at:2) equals: $g.	self assert: ((expected at:2) at:3) equals: $u; assert: ((expected at:2) at:4) equals: $n.		"original not modified"	self assert: ((aWords at:1) size) equals: 3.	self assert: ((aWords at:1) at:1) equals: $a.	self assert: ((aWords at:1) at:2) equals: $r.	self assert: ((aWords at:1) at:3) equals: $t! !WordGamesBase subclass: #Words	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WordGames'!!Words commentStamp: 'ab 1/4/2019 21:44' prior: 0!I represent collection of words!!Words methodsFor: 'as yet unclassified' stamp: 'ab 1/6/2019 23:16'!insertEverywhere: aLetter	^ self isEmpty 		ifTrue:[ self class new ]		ifFalse:[			(self first insertEverywhere:aLetter)			addAll:(self rest insertEverywhere: aLetter);yourself			]! !!Words methodsFor: 'as yet unclassified' stamp: 'ab 1/4/2019 21:55'!prefixAll: aLetter	^ self collect:[:aWord | aWord prefixWith: aLetter ].	! !
