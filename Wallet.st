Object subclass: #Wallet	instanceVariableNames: 'bagCoins'	classVariableNames: ''	poolDictionaries: ''	category: 'Wallet'!!Wallet commentStamp: 'ab 4/14/2019 01:11' prior: 0!Wallet Class!!Wallet methodsFor: 'removing' stamp: 'ab 4/15/2019 23:32'!remove: anInteger coinsOfValue: aCoin	anInteger timesRepeat: [ bagCoins remove: aCoin ifAabent: [ ]  ]! !!Wallet methodsFor: 'removing' stamp: 'ab 4/15/2019 23:07'!removeCoin: aCoinNumber	bagCoins remove: aCoinNumber! !!Wallet methodsFor: 'adding' stamp: 'ab 4/15/2019 01:36'!add: anInteger coinsOfValue: aCoinNumber	bagCoins add: aCoinNumber withOccurrences: anInteger! !!Wallet methodsFor: 'adding' stamp: 'ab 4/15/2019 23:03'!addCoin: aNumber	bagCoins add: aNumber! !!Wallet methodsFor: 'printing' stamp: 'ab 4/15/2019 23:01'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' (', self money asString, ')'! !!Wallet methodsFor: 'testing' stamp: 'ab 4/15/2019 01:57'!canPay: amountOfMoney	^ self money >= amountOfMoney! !!Wallet methodsFor: 'as yet unclassified' stamp: 'ab 4/15/2019 01:34'!coinNumber	^ bagCoins size! !!Wallet methodsFor: 'as yet unclassified' stamp: 'ab 4/16/2019 17:31'!coinsFor: aValue into: accuWallet	| currentCoin canAddCurrent |	currentCoin := self biggest.		[ accuWallet money < aValue ]		whileTrue: [ 			canAddCurrent := (accuWallet money + currentCoin <= aValue).			canAddCurrent				ifTrue: [ accuWallet addCoin: currentCoin. self removeCoin: currentCoin ].			(canAddCurrent and: [ bagCoins includes: currentCoin ])				ifFalse: [ currentCoin := self biggestBelow: currentCoin ]			].				^ accuWallet! !!Wallet methodsFor: 'as yet unclassified' stamp: 'ab 4/15/2019 23:34'!biggestAndRemove	| b |	b := self biggest.	self removeCoin: b.	^ b! !!Wallet methodsFor: 'as yet unclassified' stamp: 'ab 4/15/2019 23:36'!biggest	^ bagCoins max! !!Wallet methodsFor: 'as yet unclassified' stamp: 'ab 4/15/2019 22:59'!biggestBelow: anAmount	| coinsBelow |	coinsBelow := bagCoins select: [ :each | each < anAmount ].	^ coinsBelow isEmpty		ifTrue: [ 0 ] 		ifFalse: [ coinsBelow max ]! !!Wallet methodsFor: 'as yet unclassified' stamp: 'ab 4/15/2019 01:40'!coinsOfValue: aNumber	^ bagCoins occurrencesOf: aNumber! !!Wallet methodsFor: 'as yet unclassified' stamp: 'ab 4/15/2019 01:50'!money	| sum |	sum := 0.00.	bagCoins doWithOccurrences: [ :each :occurrence | 		sum := sum + (each * occurrence) ].	^ sum! !!Wallet methodsFor: 'as yet unclassified' stamp: 'ab 4/16/2019 02:19'!coinsFor: aValue	| res |	res := self class new.	^ (self canPay: aValue)		ifFalse: [ res ]		ifTrue: [ self coinsFor: aValue into: res ]! !!Wallet methodsFor: 'initialization' stamp: 'ab 4/15/2019 01:28'!initialize	bagCoins := Bag new! !TestCase subclass: #WalletTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Wallet'!!WalletTest commentStamp: 'ab 4/14/2019 01:09' prior: 0!Class To Test Wallet from Learning OOP and TDD with Pharo!!WalletTest methodsFor: 'tests' stamp: 'ab 4/15/2019 01:56'!testCanPay	| w |	w := Wallet new.	w add: 2 coinsOfValue: 0.50.	w add: 3 coinsOfValue: 0.20.	w add: 1 coinsOfValue: 0.02.	w add: 5 coinsOfValue: 0.05.	self assert: (w canPay: 2) not.	self assert: (w canPay: 0.50)! !!WalletTest methodsFor: 'tests' stamp: 'ab 4/15/2019 01:47'!testMoney	| w |	w := Wallet new.	w add: 2 coinsOfValue: 0.50.	w add: 3 coinsOfValue: 0.20.	w add: 1 coinsOfValue: 0.02.	self assert: w money = 1.62! !!WalletTest methodsFor: 'tests' stamp: 'ab 4/15/2019 23:02'!testAddOneCoin	| w |	w := Wallet new.	w addCoin: 0.50.	self assert: (w coinsOfValue: 0.5) = 1.	self assert: w money equals: 0.5! !!WalletTest methodsFor: 'tests' stamp: 'ab 4/15/2019 01:37'!testCoins	| w |	w := Wallet new.	w add: 2 coinsOfValue: 0.50.	w add: 3 coinsOfValue: 0.20.	self assert: w coinNumber = 5! !!WalletTest methodsFor: 'tests' stamp: 'ab 4/16/2019 02:40'!testCoinsForPayingWithOtherCoins	| w paid |	w := Wallet new.	w add: 1 coinsOfValue: 0.50.	w add: 10 coinsOfValue: 0.20.	w add: 10 coinsOfValue: 0.10.	paid := (w coinsFor: 2.4).	self assert: paid money equals: 2.4.	self assert: (paid coinsOfValue: 0.5) equals: 1.	self assert: (paid coinsOfValue: 0.2) equals: 9! !!WalletTest methodsFor: 'tests' stamp: 'ab 4/16/2019 02:42'!testCoinsForPayingWithOtherThanTop	| w paid |	w := Wallet new.	w add: 1 coinsOfValue: 0.50.	w add: 10 coinsOfValue: 0.20.	w add: 10 coinsOfValue: 0.10.	paid := (w coinsFor: 0.6).	self assert: paid money equals: 0.6.	self assert: (paid coinsOfValue: 0.5) equals: 1.	self assert: (paid coinsOfValue: 0.1) equals: 1! !!WalletTest methodsFor: 'tests' stamp: 'ab 4/16/2019 03:07'!testCoinsForPayingWithOtherThanTopMoreDifficult	| w paid |	w := Wallet new.	w add: 2 coinsOfValue: 0.50.	w add: 10 coinsOfValue: 0.20.	w add: 10 coinsOfValue: 0.10.	paid := (w coinsFor: 0.6).	self assert: paid money equals: 0.6.	self assert: (paid coinsOfValue: 0.5) equals: 1.	self assert: (paid coinsOfValue: 0.1) equals: 1! !!WalletTest methodsFor: 'tests' stamp: 'ab 4/16/2019 03:10'!testCoinsForPayingWithOtherThanTopMoreDifficult2	| w paid |	w := Wallet new.	w add: 1 coinsOfValue: 1.	w add: 2 coinsOfValue: 0.50.	w add: 10 coinsOfValue: 0.20.	w add: 10 coinsOfValue: 0.10.	paid := (w coinsFor: 0.6).	self assert: paid money equals: 0.6.	self assert: (paid coinsOfValue: 0.5) equals: 1.	self assert: (paid coinsOfValue: 0.1) equals: 1! !!WalletTest methodsFor: 'tests' stamp: 'ab 4/15/2019 01:40'!testCoinsAddition	| w |	w := Wallet new.	w add: 2 coinsOfValue: 0.50.	w add: 3 coinsOfValue: 0.20.	self assert: (w coinsOfValue: 0.5) = 2! !!WalletTest methodsFor: 'tests' stamp: 'ab 4/15/2019 23:30'!testRemoveCoins	| w |	w := Wallet new.	w add: 3 coinsOfValue: 0.50.	w add: 4 coinsOfValue: 0.20.	w add: 1 coinsOfValue: 0.05.	w remove: 4 coinsOfValue: 0.20.	self assert: w money equals: 1.55! !!WalletTest methodsFor: 'tests' stamp: 'ab 4/15/2019 22:49'!testBiggestCoins	| w |	w := Wallet new.	w add: 10 coinsOfValue: 0.50.	w add: 10 coinsOfValue: 0.20.	w add: 10 coinsOfValue: 0.10.	self assert: w biggest equals: 0.50! !!WalletTest methodsFor: 'tests' stamp: 'ab 4/14/2019 01:11'!testWalletAtCreationIsZero	| w |	w := Wallet new.	self assert: w money = 0! !!WalletTest methodsFor: 'tests' stamp: 'ab 4/15/2019 22:55'!testBiggestCoinsBelow	| w |	w := Wallet new.	w add: 10 coinsOfValue: 0.50.	w add: 10 coinsOfValue: 0.20.	w add: 10 coinsOfValue: 0.10.	self assert: (w biggestBelow: 1) equals: 0.50.	self assert: (w biggestBelow: 0.5) equals: 0.20.	self assert: (w biggestBelow: 0.48) equals: 0.20.	self assert: (w biggestBelow: 0.20) equals: 0.10.	self assert: (w biggestBelow: 0.10) equals: 0! !!WalletTest methodsFor: 'tests' stamp: 'ab 4/15/2019 23:06'!testRemove	| w |	w := Wallet new.	w add: 2 coinsOfValue: 0.50.	w add: 3 coinsOfValue: 0.20.	w add: 1 coinsOfValue: 0.02.	w add: 5 coinsOfValue: 0.05.	w removeCoin: 0.5.	self assert: w money = 1.37! !!WalletTest methodsFor: 'tests' stamp: 'ab 4/16/2019 02:32'!testCoinsForPaying	| w paid |	w := Wallet new.	w add: 10 coinsOfValue: 0.50.	w add: 10 coinsOfValue: 0.20.	w add: 10 coinsOfValue: 0.10.	paid := (w coinsFor: 2.5).	self assert: paid money equals: 2.5.	self assert: (paid coinsOfValue: 0.5) equals: 5! !!WalletTest methodsFor: 'tests' stamp: 'ab 4/15/2019 01:53'!testMoney2	| w |	w := Wallet new.	w add: 2 coinsOfValue: 0.50.	w add: 3 coinsOfValue: 0.20.	w add: 1 coinsOfValue: 0.02.	w add: 5 coinsOfValue: 0.05.	self assert: w money = 1.87	! !!WalletTest methodsFor: 'tests' stamp: 'ab 4/15/2019 01:42'!testCoinsAdditionIsWorking	| w |	w := Wallet new.	w add:  2 coinsOfValue: 0.50.	w add: 6 coinsOfValue: 0.50.	self assert: (w coinsOfValue: 0.5) = 8! !
