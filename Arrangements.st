Object subclass: #Arrangements	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Arrangements'!!Arrangements commentStamp: 'ab 6/25/2019 18:25' prior: 0!Arrangements Class!!Arrangements methodsFor: 'as yet unclassified' stamp: 'ab 6/25/2019 18:26'!allArrangements	| arrangements removeFirst addFirst |removeFirst := [ :item :arr |	| result |	result := arr deepCopy asOrderedCollection.	(result includes: item)		ifTrue: [ result remove: item ].	result asArray	 ].addFirst := [ :item :arr |	| result |	result := arr deepCopy asOrderedCollection.	result addFirst: item.	result asArray	 ].arrangements := [ :w |	(w isEmpty)		ifTrue: [ #(()) ]		ifFalse: [ (w reverse) inject: #() into:  [ :others :item |				| withoutItem addItemFront |				withoutItem := arrangements value:(removeFirst value:item value:w).				addItemFront := withoutItem collect: [ :a | addFirst value:item value:a ].				addItemFront,others				 ] ]	 ].^ (arrangements value:#('a' 's' 'd'))! !TestCase subclass: #ArrangementsTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Arrangements'!!ArrangementsTest methodsFor: 'tests' stamp: 'ab 6/25/2019 18:28'!testArrangements	"all arrangements for letters a s d"	| arr result |	arr := Arrangements new.	result := arr allArrangements.	self assert: result size equals: 6! !
